server.port=8090


# Datasource
#=============
spring.datasource.url=jdbc:mysql://localhost:3306/excellent_health?autoReconnect=true&useSSL=false
#to connect freee mysql ;;jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12261942?autoReconnect=true&useSSL=false
spring.datasource.username=root
  #sql12261942
spring.datasource.password=12345
  #BPGBprWmLg

# Hibernate properties
#=====================
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql = true
spring.jpa.open-in-view=true

# Session config
#================
server.servlet.session.cookie.max-age=700s
server.servlet.session.timeout=600s


#Dev Tool Option
#==================
#spring.devtools.livereload.port=8080
#spring.devtools.restart.enabled=true
#spring.devtools.livereload.enabled=true
#spring.devtools.restart.quiet-period=
#spring.devtools.restart.exclude=static/**,templates/**
#spring.devtools.restart.log-condition-evaluation-delta=true

## Templates reloading during development
#spring.thymeleaf.prefix=file:src/main/resources/templates/
#spring.thymeleaf.cache=false
#
## Static resources reloading during development
spring.resources.static-locations=file:src/main/resources/static/
#spring.resources.cache.period=0

# Email Service
#==================
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=excellenthealthsolution@gmail.com
spring.mail.password=dinesh2018
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true


# Need to see what happened on working { LOGIN LEVEL }
#=====================================================
#logging.level.org.springframework.web=DEBUG
#logging.level.root=INFO
#logging.level.org.springframework.security=INFO
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
#logging.level.org.hibernate.type=TRACE

#No serializer found for class org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer --> This error was happened because of LAZY loading get class so
# if need to
# PROBLEM SLOVEN
# without adding above  code can be  sloven by adding to implements Serializable to the entity class
## Example
##                   public class Patient implements Serializable{   ..................   } see below Jackson properties
## Jackson properties
spring.jackson.serialization.fail-on-empty-beans=false

#spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS = false
#spring.jackson.time-zone = UTC


    #               Cache enable - properties
    #               =========================
# @Cacheable(value="enter cache name here", key="#find springboot reference ", condition="#firstName.length() < 4", unless="#result.age<3") --> those condition add when cache is needed to update
# --> create and store data given name(value) and with parameter ( key ) condition( to what kind of data need to  store)
                # getAll method and without @Cacheable(value="cache name ")
# @CachePut(value="enter cache name here", key="find springboot reference ") - take cache and do work without going to DB
# @CacheEvict(value="enter cache name here", key="find springboot reference ") - remove value from the client site